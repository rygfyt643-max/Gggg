<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Habib Telecom - Shop Management</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            background-color: #f4f4f4;
            color: #333;
        }
        .container {
            max-width: 900px;
            margin: 0 auto;
            background-color: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }
        h1 {
            color: #0056b3;
            text-align: center;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            font-size: 2.5em;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.2);
            letter-spacing: 1px;
            margin-bottom: 25px;
        }
        h2 {
            color: #0056b3;
            text-align: center;
        }
        .section {
            margin-bottom: 30px;
            padding: 15px;
            border: 1px solid #ddd;
            border-radius: 5px;
            background-color: #f9f9f9;
        }
        .section label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
            font-size: 0.9em;
        }
        .section input[type="text"],
        .section input[type="number"],
        .section input[type="date"],
        .section textarea,
        .section select {
            width: calc(50% - 22px);
            padding: 8px;
            margin-bottom: 8px;
            border: 1px solid #ccc;
            border-radius: 4px;
            box-sizing: border-box;
            font-size: 0.9em;
        }
        .section textarea {
            width: calc(100% - 22px);
        }
        .section button {
            background-color: #007bff;
            color: white;
            padding: 8px 12px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            margin-top: 5px;
        }
        .section button:hover {
            background-color: #0056b3;
        }
        .results-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
            font-size: 0.85em;
        }
        .results-table th, .results-table td {
            border: 1px solid #ddd;
            padding: 6px;
            text-align: left;
        }
        .results-table th {
            background-color: #e2e2e2;
        }
        /* Specific column widths for better layout */
        .results-table th:nth-child(1), .results-table td:nth-child(1) { width: 12%; } /* Date */
        .results-table th:nth-child(2), .results-table td:nth-child(2) { width: 22%; } /* Product Name */
        .results-table th:nth-child(3), .results-table td:nth-child(3) { width: 8%; } /* Qty */
        .results-table th:nth-child(4), .results-table td:nth-child(4) { width: 13%; } /* Unit Sale Price */
        .results-table th:nth-child(5), .results-table td:nth-child(5) { width: 13%; } /* Total Sale Price */
        .results-table th:nth-child(6), .results-table td:nth-child(6) { width: 13%; } /* Unit Cost Price */
        .results-table th:nth-child(7), .results-table td:nth-child(7) { width: 19%; } /* Customer -> Seller */


        .tabs {
            display: flex;
            margin-bottom: 20px;
            justify-content: center;
            flex-wrap: wrap;
        }
        .tab-button {
            background-color: #eee;
            border: 1px solid #ddd;
            padding: 8px 15px;
            cursor: pointer;
            border-radius: 5px 5px 0 0;
            margin: 0 2px;
            font-size: 0.9em;
        }
        .tab-button.active {
            background-color: #007bff;
            color: white;
            border-color: #007bff;
        }
        .tab-content {
            display: none;
        }
        .tab-content.active {
            display: block;
        }
        .suggestions {
            border: 1px solid #ccc;
            max-height: 120px;
            overflow-y: auto;
            position: absolute;
            z-index: 100;
            background-color: white;
            width: calc(50% - 22px);
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
            display: none;
        }
        .suggestions div {
            padding: 6px 8px;
            cursor: pointer;
            font-size: 0.85em;
        }
        .suggestions div:hover {
            background-color: #f0f0f0;
        }
        #totalStockValueAllTime {
            text-align: center;
            font-size: 1.1em;
            font-weight: bold;
            color: #007bff;
            margin-bottom: 15px;
            padding: 8px;
            background-color: #e6f2ff;
            border-radius: 5px;
        }
        .sales-summary {
            margin-top: 15px;
            padding: 10px;
            border: 1px solid #ccc;
            background-color: #eafaea;
            border-radius: 5px;
            font-weight: bold;
            text-align: right;
            font-size: 1.0em;
        }
        .sales-summary p {
            margin: 5px 0;
        }
        .sales-summary .profit {
            color: #28a745;
        }
        .sales-summary .loss {
            color: #dc3545;
        }
        .order-status-received {
            color: green;
            font-weight: bold;
        }
        .order-status-pending {
            color: orange;
            font-weight: bold;
        }
        .order-status-ordered {
            color: blue;
            font-weight: bold;
        }

        /* Custom widths for Orders table */
        #ordersListResults .results-table th:nth-child(1), 
        #ordersListResults .results-table td:nth-child(1) { width: 5%; } /* Checkbox */
        #ordersListResults .results-table th:nth-child(2), 
        #ordersListResults .results-table td:nth-child(2) { width: 12%; } /* Order Date - Slightly increased from 10% */
        #ordersListResults .results-table th:nth-child(3), 
        #ordersListResults .results-table td:nth-child(3) { width: 30%; } /* Product Name - Adjusted to compensate */
        #ordersListResults .results-table th:nth-child(4), 
        #ordersListResults .results-table td:nth-child(4) { width: 8%; } /* Qty */
        #ordersListResults .results-table th:nth-child(5), 
        #ordersListResults .results-table td:nth-child(5) { width: 20%; } /* Status - Increased width */
        #ordersListResults .results-table th:nth-child(6), 
        #ordersListResults .results-table td:nth-child(6) { width: 25%; } /* Actions - Adjusted to compensate */
    </style>
</head>
<body>
    <div class="container">
        <h1>HABIB TELECOM</h1>

        <div id="totalStockValueAllTime">
            Current Total Stock Value (All Products at Cost Price): <span id="totalStockValueDisplay">0</span> BDT
        </div>

        <div class="tabs">
            <button class="tab-button active" onclick="openTab(event, 'addProduct')">Add Product</button>
            <button class="tab-button" onclick="openTab(event, 'saleProduct')">Sale Product</button>
            <button class="tab-button" onclick="openTab(event, 'stockManagement')">Stock Management</button>
            <button class="tab-button" onclick="openTab(event, 'orders')">Orders</button>
            <button class="tab-button" onclick="openTab(event, 'salesHistory')">Sales History</button>
            <button class="tab-button" onclick="openTab(event, 'expenseManagement')">Expense Management</button>
            <button class="tab-button" onclick="openTab(event, 'profitLoss')">Profit/Loss</button>
            <button class="tab-button" onclick="openTab(event, 'backupRestore')">Backup/Restore</button>
        </div>

        <div id="addProduct" class="tab-content active section">
            <h2>Add Product</h2>
            <label for="productName">Product Name:</label>
            <input type="text" id="productName" onkeyup="showAddProductSuggestions(this.value)" onblur="hideAddProductSuggestions()" placeholder="e.g., Samsung Galaxy A52">
            <div id="addProductSuggestions" class="suggestions"></div>
            <label for="productQuantity">Quantity:</label>
            <input type="number" id="productQuantity" placeholder="e.g., 10">
            <label for="productCostPrice">Cost Price:</label>
            <input type="number" id="productCostPrice" placeholder="e.g., 20000">
            <button onclick="addProduct()">Add Product</button>
            <div id="addProductStatus"></div>
        </div>

        <div id="saleProduct" class="tab-content section">
            <h2>Sale Product</h2>
            <label for="saleProductName">Product Name:</label>
            <input type="text" id="saleProductName" onkeyup="showSaleProductSuggestions(this.value)" onblur="hideSaleProductSuggestions()" placeholder="Start typing product name for smart search">
            <div id="saleProductSuggestions" class="suggestions"></div>
            <label for="saleQuantity">Quantity:</label>
            <input type="number" id="saleQuantity" placeholder="e.g., 1">
            <label for="salePriceOverride">Selling Price (Per Unit):</label>
            <input type="number" id="salePriceOverride" placeholder="Auto-filled from stock or enter manually">
            <label for="sellerName">Seller Name:</label>
            <input type="text" id="sellerName" placeholder="e.g., Rakib">
            <button onclick="saleProduct()">Record Sale</button>
            <div id="saleProductStatus"></div>
        </div>

        <div id="stockManagement" class="tab-content section">
            <h2>Stock Management</h2>
            <label for="searchStockProduct">Search Product Name:</label>
            <input type="text" id="searchStockProduct" onkeyup="liveSearchStock()" placeholder="Enter product name">
            <button onclick="searchStock()">Search Stock</button>
            <p><strong>Total Value of Filtered Stock (at Cost Price): <span id="totalStockValue">0</span> BDT</strong></p>
            <div id="stockSearchResults">
                <table class="results-table">
                    <thead>
                        <tr>
                            <th>Product Name</th>
                            <th>Qty</th>
                            <th>Cost Price</th>
                            <th>Selling Price</th>
                            <th>Total Cost Value</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="stockTableBody">
                        <tr><td colspan="6">Search for products to display in stock.</td></tr>
                    </tbody>
                </table>
            </div>
        </div>
        
        <div id="orders" class="tab-content section">
            <h2>Orders</h2>
            <h3>Add New Order Manually</h3>
            <label for="orderProductName">Product Name:</label>
            <input type="text" id="orderProductName" placeholder="e.g., Samsung Charger">
            <label for="orderQuantity">Quantity:</label>
            <input type="number" id="orderQuantity" placeholder="e.g., 5">
            <button onclick="addManualOrder()">Add to Order List</button>
            <div id="addOrderStatus"></div>

            <hr style="margin: 20px 0;">

            <h3>Current Order List</h3>
            <label for="ordersHistoryDate">Filter by Date (Optional):</label>
            <input type="date" id="ordersHistoryDate">
            <button onclick="searchOrdersHistory()">Filter Orders</button>
            <button onclick="prepareAndShareOrders()" style="background-color: #25D366; margin-left: 10px;">Share Selected via WhatsApp</button>
            <div id="ordersListResults">
                <table class="results-table">
                    <thead>
                        <tr>
                            <th><input type="checkbox" id="selectAllOrders" onclick="toggleAllOrderSelections()"></th> <th>Order Date</th>
                            <th>Product Name</th>
                            <th>Qty</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="ordersTableBody">
                    </tbody>
                </table>
            </div>
        </div>

        <div id="salesHistory" class="tab-content section">
            <h2>Sales History by Date</h2>
            <label for="salesHistoryDate">Select Date:</label>
            <input type="date" id="salesHistoryDate">
            <button onclick="searchSalesHistory()">Search Sales</button>
            <div id="salesHistoryResults">
                <table class="results-table">
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th>Product Name</th>
                            <th>Qty</th>
                            <th>Unit Sale Price</th>
                            <th>Total Sale Price</th>
                            <th>Unit Cost Price</th>
                            <th>Seller</th> </tr>
                    </thead>
                    <tbody id="salesHistoryTableBody">
                    </tbody>
                </table>
                <div class="sales-summary">
                    <p>Total Sales for the day: <strong id="dailyTotalSales">0</strong> BDT</p>
                    <p>Total Profit for the day: <strong id="dailyTotalProfit">0</strong> BDT</p>
                </div>
            </div>
        </div>

        <div id="expenseManagement" class="tab-content section">
            <h2>Expense Management</h2>
            <label for="expenseAmount">Amount:</label>
            <input type="number" id="expenseAmount" placeholder="e.g., 500">
            <label for="expenseReason">Reason:</label>
            <textarea id="expenseReason" rows="3" placeholder="e.g., Shop Rent, Electricity Bill"></textarea>
            <button onclick="addExpense()">Add Expense</button>
            <div id="addExpenseStatus"></div>

            <hr style="margin: 20px 0;">

            <h3>Expense History</h3>
            <label for="expenseHistoryDate">Select Date:</label>
            <input type="date" id="expenseHistoryDate">
            <button onclick="searchExpenseHistory()">Search Expenses</button>
            <div id="expenseHistoryResults">
                <table class="results-table">
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th>Amount</th>
                            <th>Reason</th>
                        </tr>
                    </thead>
                    <tbody id="expenseHistoryTableBody">
                    </tbody>
                </table>
            </div>
        </div>

        <div id="profitLoss" class="tab-content section">
            <h2>Profit/Loss</h2>
            <label for="profitLossStartDate">Start Date:</label>
            <input type="date" id="profitLossStartDate">
            <label for="profitLossEndDate">End Date:</label>
            <input type="date" id="profitLossEndDate">
            <button onclick="calculateProfitLoss()">Calculate Profit/Loss</button>
            <div id="profitLossResults">
                <p>Total Sales Revenue: <strong id="totalSalesRevenue">0</strong> BDT</p>
                <p>Total Cost of Goods Sold: <strong id="totalCostOfGoodsSold">0</strong> BDT</p>
                <p>Gross Profit: <strong id="grossProfit">0</strong> BDT</p>
                <p>Total Expenses: <strong id="totalExpenses">0</strong> BDT</p>
                <p>Net Profit/Loss: <strong id="netProfitLoss">0</strong> BDT</p>
            </div>
        </div>

        <div id="backupRestore" class="tab-content section">
            <h2>Backup and Restore (Offline Only)</h2>
            <p>Your data will be downloaded to your browser's default downloads folder.</p>
            <button onclick="backupData()">Backup Data</button>
            <button onclick="restoreData()">Restore Data</button>
            <input type="file" id="restoreFileInput" accept=".json" style="display: none;" onchange="handleRestoreFile(event)">
            <p>To restore from a file, click restore and select a previously backed-up JSON file from your computer.</p>
            <div id="backupRestoreStatus"></div>
        </div>
    </div>

    <script>
        // Data structures (using simple arrays for demonstration)
        let products = JSON.parse(localStorage.getItem('habibTelecomProducts')) || [];
        let sales = JSON.parse(localStorage.getItem('habibTelecomSales')) || [];
        let expenses = JSON.parse(localStorage.getItem('habibTelecomExpenses')) || [];
        // Removed expectedCostPrice from initial order creation model since it's not shown/selected for sharing
        let orders = JSON.parse(localStorage.getItem('habibTelecomOrders')) || []; 

        // --- Helper Functions ---
        function saveData() {
            localStorage.setItem('habibTelecomProducts', JSON.stringify(products));
            localStorage.setItem('habibTelecomSales', JSON.stringify(sales));
            localStorage.setItem('habibTelecomExpenses', JSON.stringify(expenses));
            localStorage.setItem('habibTelecomOrders', JSON.stringify(orders)); // Save orders data
            console.log('Data saved to localStorage.');
            calculateAndDisplayTotalStockValue(); // Update total stock value after any data change
        }

        function displayStatus(elementId, message, isError = false) {
            const statusElement = document.getElementById(elementId);
            statusElement.textContent = message;
            statusElement.style.color = isError ? 'red' : 'green';
            setTimeout(() => statusElement.textContent = '', 3000); // Clear after 3 seconds
        }

        function openTab(evt, tabName) {
            let i, tabcontent, tablinks;
            tabcontent = document.getElementsByClassName("tab-content");
            for (i = 0; i < tabcontent.length; i++) {
                tabcontent[i].style.display = "none";
            }
            tablinks = document.getElementsByClassName("tab-button");
            for (i = 0; i < tablinks.length; i++) {
                tablinks[i].className = tablinks[i].className.replace(" active", "");
            }
            document.getElementById(tabName).style.display = "block";
            evt.currentTarget.className += " active";

            // Special handling for stock management tab to hide data initially
            if (tabName === 'stockManagement') {
                document.getElementById('stockTableBody').innerHTML = '<tr><td colspan="6">Search for products to display in stock.</td></tr>';
                document.getElementById('totalStockValue').textContent = '0'; // Reset total stock value for filtered list
            }
            // Reset daily sales/profit display when switching tabs
            if (tabName !== 'salesHistory') {
                document.getElementById('dailyTotalSales').textContent = '0';
                document.getElementById('dailyTotalProfit').textContent = '0';
                document.querySelector('#salesHistory .sales-summary').style.display = 'none'; // Hide summary
            }
            // Special handling for orders tab to load data
            if (tabName === 'orders') {
                searchOrdersHistory(); // Load all orders when tab is opened
            }
        }

        // --- Calculate and Display Total Stock Value (All Products at Cost Price) ---
        function calculateAndDisplayTotalStockValue() {
            let totalValue = 0;
            products.forEach(product => {
                totalValue += (product.quantity * (product.costPrice || 0)); // Use costPrice for total stock value
            });
            document.getElementById('totalStockValueDisplay').textContent = totalValue.toFixed(2);
        }

        // --- Add Product ---
        function addProduct() {
            const name = document.getElementById('productName').value.trim();
            const quantity = parseInt(document.getElementById('productQuantity').value);
            const costPrice = parseFloat(document.getElementById('productCostPrice').value);

            if (!name || isNaN(costPrice) || isNaN(quantity) || costPrice <= 0 || quantity <= 0) {
                displayStatus('addProductStatus', 'Please enter valid product name, quantity, and cost price.', true);
                return;
            }

            const existingProduct = products.find(p => p.name.toLowerCase() === name.toLowerCase());
            if (existingProduct) {
                existingProduct.quantity += quantity;
                existingProduct.costPrice = costPrice;
                if (existingProduct.sellingPrice === 0 || existingProduct.sellingPrice === undefined) {
                    existingProduct.sellingPrice = costPrice;
                }
                displayStatus('addProductStatus', `Updated quantity for ${name}. New quantity: ${existingProduct.quantity}`, false);
            } else {
                products.push({ name, costPrice, sellingPrice: costPrice, quantity }); 
                displayStatus('addProductStatus', `${name} added successfully!`, false);
            }
            saveData();
            document.getElementById('productName').value = '';
            document.getElementById('productQuantity').value = '';
            document.getElementById('productCostPrice').value = '';
        }

        // --- Smart Search for Add Product ---
        function showAddProductSuggestions(inputVal) {
            const suggestionsDiv = document.getElementById('addProductSuggestions');
            suggestionsDiv.innerHTML = '';
            suggestionsDiv.style.display = 'none';

            if (inputVal.length < 2) {
                return;
            }

            const lowerInputVal = inputVal.toLowerCase();
            const inputWords = lowerInputVal.split(/\s+/).filter(word => word.length > 0);

            const matchedProducts = products.filter(product => {
                const lowerProductName = product.name.toLowerCase();
                return inputWords.every(word => lowerProductName.includes(word));
            }).slice(0, 10);

            if (matchedProducts.length > 0) {
                matchedProducts.forEach(product => {
                    const div = document.createElement('div');
                    div.textContent = `${product.name} (Cost: ${product.costPrice}, Sell: ${product.sellingPrice || 'N/A'})`;
                    div.onclick = () => {
                        document.getElementById('productName').value = product.name;
                        document.getElementById('productCostPrice').value = product.costPrice;
                        document.getElementById('productQuantity').value = '';
                        suggestionsDiv.style.display = 'none';
                    };
                    suggestionsDiv.appendChild(div);
                });
                suggestionsDiv.style.display = 'block';
            }
        }

        function hideAddProductSuggestions() {
            setTimeout(() => {
                document.getElementById('addProductSuggestions').style.display = 'none';
            }, 100);
        }

        // --- Smart Search for Sale Product ---
        function showSaleProductSuggestions(inputVal) {
            const suggestionsDiv = document.getElementById('saleProductSuggestions');
            suggestionsDiv.innerHTML = '';
            suggestionsDiv.style.display = 'none';

            if (inputVal.length < 2) {
                return;
            }

            const lowerInputVal = inputVal.toLowerCase();
            const inputWords = lowerInputVal.split(/\s+/).filter(word => word.length > 0);

            const matchedProducts = products.filter(product => {
                const lowerProductName = product.name.toLowerCase();
                return inputWords.every(word => lowerProductName.includes(word));
            }).slice(0, 10);

            if (matchedProducts.length > 0) {
                matchedProducts.forEach(product => {
                    const div = document.createElement('div');
                    div.textContent = `${product.name} (Stock: ${product.quantity}, Cost: ${product.costPrice}, Sell: ${product.sellingPrice})`;
                    div.onclick = () => {
                        document.getElementById('saleProductName').value = product.name;
                        document.getElementById('salePriceOverride').value = product.sellingPrice;
                        document.getElementById('saleQuantity').value = '';
                        suggestionsDiv.style.display = 'none';
                    };
                    suggestionsDiv.appendChild(div);
                });
                suggestionsDiv.style.display = 'block';
            }
        }

        function hideSaleProductSuggestions() {
            setTimeout(() => {
                document.getElementById('saleProductSuggestions').style.display = 'none';
            }, 100);
        }

        // --- Sale Product ---
        function saleProduct() {
            const productName = document.getElementById('saleProductName').value.trim();
            const saleQuantity = parseInt(document.getElementById('saleQuantity').value);
            const customSellingPrice = parseFloat(document.getElementById('salePriceOverride').value);
            const sellerName = document.getElementById('sellerName').value.trim(); // Changed from customerName

            if (!productName || isNaN(saleQuantity) || saleQuantity <= 0 || isNaN(customSellingPrice) || customSellingPrice <= 0 || !sellerName) {
                displayStatus('saleProductStatus', 'Please enter a valid product name, quantity, selling price, and seller name.', true);
                return;
            }

            const productIndex = products.findIndex(p => p.name.toLowerCase() === productName.toLowerCase());
            let product = null;
            let costPriceAtSale = 0;

            if (productIndex !== -1) {
                product = products[productIndex];
                costPriceAtSale = product.costPrice;

                if (product.quantity < saleQuantity) {
                    displayStatus('saleProductStatus', `Warning: Not enough stock. Available: ${product.quantity}. Sale will still be recorded.`, false);
                }
                
                product.quantity -= saleQuantity;

                if (product.sellingPrice === 0 || product.sellingPrice === undefined) {
                    product.sellingPrice = customSellingPrice;
                }

                if (product.quantity <= 0) {
                    // Add to orders if stock becomes 0 or less
                    addOrder(product.name, Math.abs(product.quantity) + 1, product.costPrice, 'Pending - Stock Depleted'); // Suggest adding at least 1 more
                    products.splice(productIndex, 1);
                    displayStatus('saleProductStatus', `${product.name} stock finished and removed from active stock. Added to Orders.`, false);
                } else {
                    displayStatus('saleProductStatus', `Sale recorded for ${saleQuantity} of ${product.name}. New stock: ${product.quantity}`, false);
                }
            } else {
                displayStatus('saleProductStatus', `Product "${productName}" not found in stock. Sale recorded without stock deduction.`, false);
                // Optionally add to orders if product was sold but not in stock
                addOrder(productName, saleQuantity, 0, 'Pending - Not in Stock'); 
            }
            
            sales.push({
                date: new Date().toISOString().slice(0, 10),
                productName: productName,
                quantity: saleQuantity,
                sellingPricePerUnit: customSellingPrice,
                salePrice: customSellingPrice * saleQuantity,
                costPriceAtSale: costPriceAtSale,
                seller: sellerName // Changed from customer
            });
            
            saveData();
            document.getElementById('saleProductName').value = '';
            document.getElementById('saleQuantity').value = '';
            document.getElementById('salePriceOverride').value = '';
            document.getElementById('sellerName').value = ''; // Changed from customerName
        }

        // --- Sales History by Date ---
        function searchSalesHistory() {
            const date = document.getElementById('salesHistoryDate').value;
            const salesHistoryTableBody = document.getElementById('salesHistoryTableBody');
            salesHistoryTableBody.innerHTML = '';

            const dailyTotalSalesElement = document.getElementById('dailyTotalSales');
            const dailyTotalProfitElement = document.getElementById('dailyTotalProfit');
            const salesSummaryDiv = document.querySelector('#salesHistory .sales-summary');

            let totalSalesForDay = 0;
            let totalProfitForDay = 0;

            if (!date) {
                salesHistoryTableBody.innerHTML = '<tr><td colspan="7">Please select a date.</td></tr>';
                dailyTotalSalesElement.textContent = '0';
                dailyTotalProfitElement.textContent = '0';
                salesSummaryDiv.style.display = 'none';
                return;
            }

            const filteredSales = sales.filter(s => s.date === date);

            if (filteredSales.length === 0) {
                salesHistoryTableBody.innerHTML = '<tr><td colspan="7">No sales found for this date.</td></tr>';
                dailyTotalSalesElement.textContent = '0';
                dailyTotalProfitElement.textContent = '0';
                salesSummaryDiv.style.display = 'none';
                return;
            }

            filteredSales.forEach(sale => {
                const row = salesHistoryTableBody.insertRow();
                row.insertCell().textContent = sale.date;
                row.insertCell().textContent = sale.productName;
                row.insertCell().textContent = sale.quantity;
                row.insertCell().textContent = sale.sellingPricePerUnit ? sale.sellingPricePerUnit.toFixed(2) : 'N/A';
                row.insertCell().textContent = sale.salePrice ? sale.salePrice.toFixed(2) : 'N/A';
                row.insertCell().textContent = sale.costPriceAtSale ? sale.costPriceAtSale.toFixed(2) : 'N/A';
                row.insertCell().textContent = sale.seller; // Changed from customer
                

                totalSalesForDay += sale.salePrice;
                totalProfitForDay += (sale.sellingPricePerUnit - (sale.costPriceAtSale || 0)) * sale.quantity;
            });

            dailyTotalSalesElement.textContent = totalSalesForDay.toFixed(2);
            dailyTotalProfitElement.textContent = totalProfitForDay.toFixed(2);
            dailyTotalProfitElement.className = totalProfitForDay >= 0 ? 'profit' : 'loss';
            salesSummaryDiv.style.display = 'block';
        }

        // --- Stock Management ---
        function liveSearchStock() {
            const searchTerm = document.getElementById('searchStockProduct').value.toLowerCase();
            const stockTableBody = document.getElementById('stockTableBody');
            stockTableBody.innerHTML = '';

            if (searchTerm.length < 2) {
                stockTableBody.innerHTML = '<tr><td colspan="6">Type at least 2 characters to search in stock.</td></tr>';
                document.getElementById('totalStockValue').textContent = '0';
                return;
            }

            const inputWords = searchTerm.split(/\s+/).filter(word => word.length > 0);

            const filteredProducts = products.filter(p => {
                const lowerProductName = p.name.toLowerCase();
                return inputWords.every(word => lowerProductName.includes(word));
            });

            displayStockProducts(filteredProducts);
        }

        function searchStock() {
            const searchTerm = document.getElementById('searchStockProduct').value.toLowerCase();
            let productsToDisplay;

            if (searchTerm.length === 0) {
                productsToDisplay = products;
            } else {
                const inputWords = searchTerm.split(/\s+/).filter(word => word.length > 0);
                productsToDisplay = products.filter(p => {
                    const lowerProductName = p.name.toLowerCase();
                    return inputWords.every(word => lowerProductName.includes(word));
                });
            }
            displayStockProducts(productsToDisplay);
        }

        function displayStockProducts(productsToDisplay) {
            const stockTableBody = document.getElementById('stockTableBody');
            stockTableBody.innerHTML = '';
            let totalStockValueFiltered = 0;

            if (productsToDisplay.length === 0) {
                stockTableBody.innerHTML = '<tr><td colspan="6">No products found matching your search.</td></tr>';
                document.getElementById('totalStockValue').textContent = '0';
                return;
            }

            productsToDisplay.forEach((product) => {
                const row = stockTableBody.insertRow();
                const productCostValue = product.quantity * (product.costPrice || 0);
                totalStockValueFiltered += productCostValue;

                row.insertCell().textContent = product.name;
                row.insertCell().textContent = product.quantity;
                row.insertCell().textContent = product.costPrice.toFixed(2);
                row.insertCell().textContent = product.sellingPrice ? product.sellingPrice.toFixed(2) : 'N/A';
                row.insertCell().textContent = productCostValue.toFixed(2);

                const actionCell = row.insertCell();
                const editButton = document.createElement('button');
                editButton.textContent = 'Edit';
                editButton.onclick = () => editStockItem(product.name, product.quantity, product.costPrice, product.sellingPrice);
                actionCell.appendChild(editButton);

                const deleteButton = document.createElement('button');
                deleteButton.textContent = 'Delete';
                deleteButton.style.marginLeft = '5px';
                deleteButton.onclick = () => deleteStockItem(product.name);
                actionCell.appendChild(deleteButton);
            });
            document.getElementById('totalStockValue').textContent = totalStockValueFiltered.toFixed(2);
        }

        function editStockItem(productName, currentQuantity, currentCostPrice, currentSellingPrice) {
            const newQuantityStr = prompt(`Enter new quantity for ${productName}:`, currentQuantity);
            const newCostPriceStr = prompt(`Enter new cost price for ${productName}:`, currentCostPrice);
            const newSellingPriceStr = prompt(`Enter new selling price for ${productName}:`, currentSellingPrice || 0);

            if (newQuantityStr !== null && newCostPriceStr !== null && newSellingPriceStr !== null) {
                const newQuantity = parseInt(newQuantityStr);
                const newCostPrice = parseFloat(newCostPriceStr);
                const newSellingPrice = parseFloat(newSellingPriceStr);

                if (isNaN(newQuantity) || newQuantity < 0 || isNaN(newCostPrice) || newCostPrice <= 0 || isNaN(newSellingPrice) || newSellingPrice < 0) {
                    alert('Invalid input. Please enter valid numbers (quantity >= 0, cost price > 0, selling price >= 0).');
                    return;
                }
                if (newSellingPrice !== 0 && newSellingPrice < newCostPrice) {
                    alert('Selling price should not be less than cost price (unless 0).');
                    return;
                }

                const product = products.find(p => p.name === productName);
                if (product) {
                    product.quantity = newQuantity;
                    product.costPrice = newCostPrice;
                    product.sellingPrice = newSellingPrice;
                    
                    if (product.quantity <= 0) {
                        // Add to orders if stock becomes 0 or less
                        // We pass 0 as expectedCostPrice since it's no longer asked for in UI for new orders
                        addOrder(product.name, Math.abs(product.quantity) + 1, product.costPrice, 'Pending - Stock Depleted'); 
                        products = products.filter(p => p.name !== productName);
                        alert(`${productName} stock finished and removed from active stock. Added to Orders.`);
                    } else {
                        alert(`${productName} updated successfully.`);
                    }
                    saveData();
                    liveSearchStock();
                }
            }
        }

        function deleteStockItem(productName) {
            if (confirm(`Are you sure you want to delete ${productName} from stock permanently?`)) {
                products = products.filter(p => p.name !== productName);
                saveData();
                liveSearchStock();
                alert(`${productName} deleted successfully.`);
            }
        }

        // --- Orders Management ---
        // Modified addOrder: expectedCostPrice is now an optional parameter
        function addOrder(productName, quantity, expectedCostPrice = 0, status = 'Pending') {
            const today = new Date().toISOString().slice(0, 10);
            orders.push({
                id: Date.now(), // Unique ID for each order item
                date: today,
                productName: productName,
                quantity: quantity,
                expectedCostPrice: expectedCostPrice, // Still store internally for profit/loss calculation
                status: status // e.g., 'Pending', 'Ordered', 'Received'
            });
            saveData();
        }

        function addManualOrder() {
            const productName = document.getElementById('orderProductName').value.trim();
            const quantity = parseInt(document.getElementById('orderQuantity').value);
            // Expected cost price is no longer taken from UI
            // We can default it to 0 or ask if needed for internal record-keeping only later
            const expectedCostPrice = 0; // Defaulting to 0 as it's not in the UI

            if (!productName || isNaN(quantity) || quantity <= 0) {
                displayStatus('addOrderStatus', 'Please enter a valid product name and quantity.', true);
                return;
            }

            addOrder(productName, quantity, expectedCostPrice, 'Pending'); // Pass 0 as cost price
            displayStatus('addOrderStatus', `${productName} added to order list successfully!`, false);
            document.getElementById('orderProductName').value = '';
            document.getElementById('orderQuantity').value = '';
            // document.getElementById('orderCostPrice').value = ''; // This input field is removed
            searchOrdersHistory(); // Refresh the order list
        }

        function searchOrdersHistory() {
            const dateFilter = document.getElementById('ordersHistoryDate').value;
            const ordersTableBody = document.getElementById('ordersTableBody');
            ordersTableBody.innerHTML = '';
            document.getElementById('selectAllOrders').checked = false; // Uncheck select all on new search

            let filteredOrders = orders;
            if (dateFilter) {
                filteredOrders = orders.filter(order => order.date === dateFilter);
            }

            if (filteredOrders.length === 0) {
                ordersTableBody.innerHTML = '<tr><td colspan="6">No orders found.</td></tr>';
                return;
            }

            filteredOrders.forEach(order => {
                const row = ordersTableBody.insertRow();
                // Add checkbox for selection
                const checkboxCell = row.insertCell();
                const checkbox = document.createElement('input');
                checkbox.type = 'checkbox';
                checkbox.className = 'order-select-checkbox';
                checkbox.value = order.id; // Use order ID to identify for sharing
                checkboxCell.appendChild(checkbox);

                row.insertCell().textContent = order.date;
                row.insertCell().textContent = order.productName;
                row.insertCell().textContent = order.quantity;
                // Removed Expected Cost column from display
                
                const statusCell = row.insertCell();
                statusCell.textContent = order.status;
                statusCell.className = `order-status-${order.status.toLowerCase().replace(/\s/g, '-')}`;

                const actionCell = row.insertCell();
                if (order.status === 'Pending') {
                    const markOrderedBtn = document.createElement('button');
                    markOrderedBtn.textContent = 'Mark as Ordered';
                    markOrderedBtn.onclick = () => updateOrderStatus(order.id, 'Ordered');
                    actionCell.appendChild(markOrderedBtn);
                } else if (order.status === 'Ordered') {
                    const markReceivedBtn = document.createElement('button');
                    markReceivedBtn.textContent = 'Mark as Received';
                    // We still use order.expectedCostPrice when receiving to update main stock
                    markReceivedBtn.onclick = () => markOrderReceived(order.id);
                    actionCell.appendChild(markReceivedBtn);
                }
                
                const deleteBtn = document.createElement('button');
                deleteBtn.textContent = 'Delete';
                deleteBtn.style.marginLeft = '5px';
                deleteBtn.onclick = () => deleteOrder(order.id);
                actionCell.appendChild(deleteBtn);
            });
        }

        function updateOrderStatus(id, newStatus) {
            const orderIndex = orders.findIndex(o => o.id === id);
            if (orderIndex !== -1) {
                orders[orderIndex].status = newStatus;
                saveData();
                searchOrdersHistory();
            }
        }

        function markOrderReceived(id) {
            const orderIndex = orders.findIndex(o => o.id === id);
            if (orderIndex !== -1) {
                const order = orders[orderIndex];
                if (confirm(`Mark ${order.productName} (Qty: ${order.quantity}) as Received? Do you want to add this to your main stock?`)) {
                    // Add to main product stock
                    const existingProductIndex = products.findIndex(p => p.name.toLowerCase() === order.productName.toLowerCase());
                    if (existingProductIndex !== -1) {
                        products[existingProductIndex].quantity += order.quantity;
                        // Optionally update cost price to the received cost price if recorded.
                        // If expectedCostPrice was always 0 in the UI, this will use 0.
                        products[existingProductIndex].costPrice = order.expectedCostPrice; 
                        alert(`${order.quantity} of ${order.productName} added to existing stock.`);
                    } else {
                        products.push({
                            name: order.productName,
                            costPrice: order.expectedCostPrice, // Use the expected cost price if available
                            sellingPrice: order.expectedCostPrice, // Default selling price to cost if new
                            quantity: order.quantity
                        });
                        alert(`${order.quantity} of ${order.productName} added as a new product to stock.`);
                    }
                    // Remove from orders list
                    orders.splice(orderIndex, 1);
                    saveData();
                    searchOrdersHistory();
                }
            }
        }

        function deleteOrder(id) {
            if (confirm('Are you sure you want to delete this order?')) {
                orders = orders.filter(o => o.id !== id);
                saveData();
                searchOrdersHistory();
            }
        }

        // --- Share Functions with Selection ---
        function toggleAllOrderSelections() {
            const selectAllCheckbox = document.getElementById('selectAllOrders');
            const checkboxes = document.querySelectorAll('.order-select-checkbox');
            checkboxes.forEach(checkbox => {
                checkbox.checked = selectAllCheckbox.checked;
            });
        }

        function prepareAndShareOrders() {
            const selectedOrderIds = Array.from(document.querySelectorAll('.order-select-checkbox:checked'))
                                         .map(checkbox => parseInt(checkbox.value));
            
            if (selectedOrderIds.length === 0) {
                alert('Please select at least one order to share.');
                return;
            }

            const ordersToShare = orders.filter(order => selectedOrderIds.includes(order.id));

            let message = "Habib Telecom - Order List:\n\n";

            ordersToShare.forEach((order, index) => {
                message += `${index + 1}. ${order.productName} - Qty: ${order.quantity}\n`;
            });

            // Remove shared orders from the list
            orders = orders.filter(order => !selectedOrderIds.includes(order.id));
            saveData();
            searchOrdersHistory(); // Refresh the displayed list

            // Encode the message for URL
            const encodedMessage = encodeURIComponent(message);

            // WhatsApp Web URL (for desktop) or WhatsApp App URL (for mobile)
            const whatsappURL = `https://wa.me/?text=${encodedMessage}`;

            // Open in a new tab
            window.open(whatsappURL, '_blank');
        }


        // --- Expense Management ---
        function addExpense() {
            const amount = parseFloat(document.getElementById('expenseAmount').value);
            const reason = document.getElementById('expenseReason').value.trim();

            if (isNaN(amount) || amount <= 0 || !reason) {
                displayStatus('addExpenseStatus', 'Please enter a valid amount and reason for the expense.', true);
                return;
            }

            expenses.push({
                date: new Date().toISOString().slice(0, 10),
                amount: amount,
                reason: reason
            });
            displayStatus('addExpenseStatus', `Expense of ${amount} BDT added for: ${reason}`, false);
            saveData();
            document.getElementById('expenseAmount').value = '';
            document.getElementById('expenseReason').value = '';
        }

        // --- Expense History by date ---
        function searchExpenseHistory() {
            const date = document.getElementById('expenseHistoryDate').value;
            const expenseHistoryTableBody = document.getElementById('expenseHistoryTableBody');
            expenseHistoryTableBody.innerHTML = '';

            if (!date) {
                expenseHistoryTableBody.innerHTML = '<tr><td colspan="3">Please select a date.</td></tr>';
                return;
            }

            const filteredExpenses = expenses.filter(e => e.date === date);

            if (filteredExpenses.length === 0) {
                expenseHistoryTableBody.innerHTML = '<tr><td colspan="3">No expenses found for this date.</td></tr>';
                return;
            }

            filteredExpenses.forEach(expense => {
                const row = expenseHistoryTableBody.insertRow();
                row.insertCell().textContent = expense.date;
                row.insertCell().textContent = expense.amount;
                row.insertCell().textContent = expense.reason;
            });
        }

        // --- Profit/Loss ---
        function calculateProfitLoss() {
            const startDate = document.getElementById('profitLossStartDate').value;
            const endDate = document.getElementById('profitLossEndDate').value;

            if (!startDate || !endDate) {
                document.getElementById('profitLossResults').innerHTML = '<p style="color:red;">Please select both start and end dates.</p>';
                return;
            }

            const start = new Date(startDate + 'T00:00:00');
            const end = new Date(endDate + 'T23:59:59');

            let totalSalesRevenue = 0;
            let totalCostOfGoodsSold = 0;

            sales.forEach(sale => {
                const saleDate = new Date(sale.date + 'T00:00:00');
                if (saleDate >= start && saleDate <= end) {
                    totalSalesRevenue += sale.salePrice;
                    totalCostOfGoodsSold += (sale.costPriceAtSale * sale.quantity) || 0; 
                }
            });

            const grossProfit = totalSalesRevenue - totalCostOfGoodsSold;

            let totalExpenses = 0;
            expenses.forEach(expense => {
                const expenseDate = new Date(expense.date + 'T00:00:00');
                if (expenseDate >= start && expenseDate <= end) {
                    totalExpenses += expense.amount;
                }
            });

            const netProfitLoss = grossProfit - totalExpenses;

            document.getElementById('totalSalesRevenue').textContent = totalSalesRevenue.toFixed(2);
            document.getElementById('totalCostOfGoodsSold').textContent = totalCostOfGoodsSold.toFixed(2);
            document.getElementById('grossProfit').textContent = grossProfit.toFixed(2);
            document.getElementById('grossProfit').style.color = grossProfit >= 0 ? 'green' : 'red';

            document.getElementById('totalExpenses').textContent = totalExpenses.toFixed(2);
            document.getElementById('netProfitLoss').textContent = netProfitLoss.toFixed(2);
            document.getElementById('netProfitLoss').style.color = netProfitLoss >= 0 ? 'green' : 'red';
        }

        // --- Backup and Restore ---
        function backupData() {
            const data = {
                products: products,
                sales: sales,
                expenses: expenses,
                orders: orders // Include orders in backup
            };
            const dataStr = JSON.stringify(data, null, 2);

            const now = new Date();
            const year = now.getFullYear();
            const month = (now.getMonth() + 1).toString().padStart(2, '0');
            const day = now.getDate().toString().padStart(2, '0');
            const hours = now.getHours().toString().padStart(2, '0');
            const minutes = now.getMinutes().toString().padStart(2, '0');
            const seconds = now.getSeconds().toString().padStart(2, '0');
            const fileName = `HabibTelecom_Backup_${year}-${month}-${day}_${hours}-${minutes}-${seconds}.json`;

            const blob = new Blob([dataStr], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = fileName; // Use the new descriptive file name
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
            displayStatus('backupRestoreStatus', 'Data backed up successfully! It should be in your browser\'s downloads folder.', false);
        }

        function restoreData() {
            document.getElementById('restoreFileInput').click();
        }

        function handleRestoreFile(event) {
            const file = event.target.files[0];
            if (!file) {
                displayStatus('backupRestoreStatus', 'No file selected.', true);
                return;
            }

            const reader = new FileReader();
            reader.onload = function(e) {
                try {
                    const restoredData = JSON.parse(e.target.result);
                    if (confirm('Restoring data will overwrite all current data. Are you sure you want to proceed?')) {
                        products = restoredData.products || [];
                        sales = restoredData.sales || []; 
                        expenses = restoredData.expenses || [];
                        orders = restoredData.orders || []; // Restore orders data
                        saveData();
                        displayStatus('backupRestoreStatus', 'Data restored successfully! Please refresh the page to see all changes applied across tabs.', false);
                    }
                } catch (error) {
                    displayStatus('backupRestoreStatus', 'Error parsing file. Make sure it\'s a valid JSON backup.', true);
                    console.error('Restore error:', error);
                }
            };
            reader.readAsText(file);
        }

        // Initial setup on page load
        document.addEventListener('DOMContentLoaded', () => {
            const today = new Date().toISOString().slice(0, 10);
            document.getElementById('salesHistoryDate').value = today;
            document.getElementById('expenseHistoryDate').value = today;
            document.getElementById('ordersHistoryDate').value = today; // Set current date for orders filter

            const firstDayOfMonth = new Date(new Date().getFullYear(), new Date().getMonth(), 1).toISOString().slice(0, 10);
            document.getElementById('profitLossStartDate').value = firstDayOfMonth;
            document.getElementById('profitLossEndDate').value = today;
            
            openTab({currentTarget: document.querySelector('.tab-button.active')}, 'addProduct');
            calculateAndDisplayTotalStockValue();
        });

    </script>
</body>
</html>